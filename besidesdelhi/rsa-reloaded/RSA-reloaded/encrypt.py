from Crypto.Util.number import *
from Crypto.PublicKey import RSA
import gmpy2

# p=getPrime(1024)
# q=getPrime(1024)
def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y

flag = "flag{F3rm@t_&_s0me_t1nk3"
e=65537



# flag=open('flag.txt').read()
f1=bytes_to_long(flag[:len(flag)/2])
# f2=bytes_to_long(flag[len(flag)/2:])

# if p>q:
# 	x=p%q
# else:
# 	x=q%p

# s=gmpy2.next_prime(r)

# for i in range(50):
# 	s=gmpy2.next_prime(s)

# N2=r*s

# enc_f1=pow(f2,e,N1)
# enc_f2=pow(f1,e,N2)

# pub_key = RSA.construct((int(N1), e))
# pub_key2 = RSA.construct((int(N2), e))
# open("publickey1.pem","w").write(pub_key.exportKey("PEM"))
# open("publickey2.pem","w").write(pub_key2.exportKey("PEM"))

# file1 = open("ciphertext1.txt", 'w')
# file2 = open("ciphertext2.txt", 'w')
# file1.write(str(enc_f1))
# file2.write(str(enc_f2))

# N1 = 15734585081125575733996272811952115777355044115752100578015434871920669286804598156815003904078914406576594592290564446873032749285406722964577000425735510992160244868841054453491813453667212410066212339144965099492232385135909688855405032590921812924866988314515246002085852724147163894053827001999633059236004324326480738385299978861288911070377640219791157957447574093867830847155145895499907899273422498220213588578556735713211394867041216220381922928640589449771735983601741539410404370880840656290446875124247028302082155742929756690647332314894723368304729477461754526281870717827288099943300701550440821470837
# N2 = 1221024708820786179190976660508320005896355519903188535249904331987664341341347662397486610210332474586137099646510853436612892094840988719982847874914359521123317771105393255447596584334914087524162573466277233671814646774387231619933320480528193535144647316479017577410828954550562744045188325278471803143314194638525486712345316775303151726512034202977339560105757053009334374023194259252090094885164075161521446371148884287813587407701232050179031411914220595441152984719876160711931019844435428660131203923769100637003100657684088946146328617150185297531092318696999531726176997609202949206265566706798435783729

P2 = 34943163978391913490204654305109869295969157488468663432729901906249731064212045067569040629711809459931937454973699790926994065010763031849790674858604991174643121365163423162775788932612813130638817575733125991407600361279872314029744419625686687155697263385630614699236173841815497058736893083857633916533
Q2 = 34943163978391913490204654305109869295969157488468663432729901906249731064212045067569040629711809459931937454973699790926994065010763031849790674858604991174643121365163423162775788932612813130638817575733125991407600361279872314029744419625686687155697263385630614699236173841815497058736893083857633953613
# ct2 = 720336303815976435960535386565298253917301410143042455414749354278998354711417859713176558018723953167245949341553676677606186844692745131879730233112804103895056237414988941251562952580874379924021140152820592041519436003547905142989374910253868640294361777968506003000509649929691016350483107377073043489660346750211371485068306084103641837994518138152566374479300028404788777718238937329263008132850286656496357294026208591137553112829472346321602199854893500327419190240478598316514987190292957831904729491732321821010395230567921598353908303162037876529987366642090956212558413788635816629533331854265110439562
# ct1 = 9487341811162828852624490333351729972267613161732702520360352607861401987201312103486995348470220908634467468849530123630733494221072022235462597033186714521759666140232970127208173677641698566801132239812856250932681591031073089224810061516865884354315145934044864851489540980292173024996801525629642199750983493941177227822694735281265429662933894875414018994886084399944107873262803718093774820641369618367718492818757774725477934957021552170853545114222052387655020014050439857140746072154265813708499993547896725495119277435663141247838718756489986282983071978632225188148268715713168868025674730763137176945862

# phi = (P2 - 1) * (Q2 - 1)

# # Compute modular inverse of e
# gcd, a, b = egcd(e, phi)
# d = a
# d = d % phi
# if (d < 0):
# 	d += phi

# print( "d:  " + str(d) )

# pt = hex(int(pow(ct1, d, N2)))[2:-1].decode('hex')
# print(pt)
a = 0
x = -1
while(a==0):
	x += 1
	if P2==gmpy2.next_prime(x+f1):
		print(x)
		break