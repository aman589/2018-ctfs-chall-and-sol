def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y

def main():

    # 
    n = 140165355674296399459239442258630641339281917770736077969396713192714338090714726890918178888723629353043167144351074222216025145349467583141291274172356560132771690830020353668100494447956043734613525952945037667879068512918232837185005693504551982611886445611514773529698595162274883360353962852882911457919 

    e = 65537
    ct = 86445915530920147553767348020686132564453377048106098831426077547738998373682256014690928256854752252580894971618956714013602556152722531577337080534714463052378206442086672725486411296963581166836329721403101091377505869510101752378162287172126836920825099014089297075416142603776647872962582390687281063434 

    d = pow(256,e,n)*ct
    print(hex(d))

#     # compute n
#     # n = p * q
#     # print n

#     # Compute phi(n)
#     phi = (p - 1) * (q - 1)

#     # Compute modular inverse of e
#     gcd, a, b = egcd(e, phi)
#     d = a
#     d = d % phi
#     if (d < 0):
#         d += phi

#     print( "d:  " + str(d) );

#     pt = hex(int(pow(ct, d, n)))[2:-1].decode("hex")
    pt = pow(ct, d, n)
    print( "flag: " + str(pt) )

if __name__ == "__main__":
    main()