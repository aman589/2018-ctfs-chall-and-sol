from Crypto.Util.number import isPrime
from random import getrandbits
import numpy as np
# def genKey(k):

# 	while True:
# 		r=getrandbits(k)
# 		while(r%2):
# 			r=getrandbits(k)
	
# 		p =  3 * r**2 +  2 * r + 7331
# 		q = 17 * r**2 + 18 * r + 1339
# 		n = p * q

# 		if(isPrime(p) and isPrime(q)):
# 			return (p,q) , n

# def encrypt(m,pubkey):

# 	c=m**2 % pubkey
# 	return c

# privkey,pubkey = genKey(256)

# flag = open('flag.txt').read().strip()
# while(len(flag)<125):
# 	flag+='X'
# flag = int(flag.encode('hex'),16)

# ct=encrypt(flag,pubkey)

# with open('flag.enc','w') as f:
# 	f.write('ct = ' + str(ct))

# with open('pubkey.txt','w') as f:
# 	f.write('pubkey = ' + str(pubkey))

# with open('privkey.txt','w') as f:
# 	f.write('privkey = ' + str(privkey))

# n = (r**4)*51 + (r**3)*88 + (r**2)*128680 + r*134636 + 577080346122592746450960451960811644036616146551114466727848435471345510503600476295033089858879506008659314011731832530327234404538741244932419600335200164601269385608667547863884257092161720382751699219503255979447796158029804610763137212345011761551677964560842758022253563721669200186956359020683969724600

coeff = [51,88,128680,134636,577080346122592746450960451960811644036616146551114466727848435471345510503600476295033089858879506008659314011731832530327234404538741244932419600335200164601269385608667547863884257092161720382751699219503255979447796158029804610763137212345011761551677964560842758022253563721669200186956359020683969724600]
print(np.roots(coeff))