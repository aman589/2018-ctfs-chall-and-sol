def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y

def main():

 
    p = 128560694465711843998642629641110853033 
    q = 97625680978671329028071161980969374695621
    n = 86107879980001319199580736210142269432231937982963598059279085257144931252429425324778418355032813036714928553700204078289507550048288603375247933471847949190664200795751343599663412064051326556711685436144325728276242631323184627756832645678203785443496789501794449443803098658301055011392958303088963571437
    e = 4804866214304359740495700937188004933299848897625736272682356757028533707526044958004099606700871221985542422156669458692108718899653499893850522494263513415799627626329403857538267195314562014741284269288756833326476845205290120212520105788717776901857557869378483430937922247041597044991389049946267472509
    ct = 37029808151216979908921833458726397212123340509417240200651561253426459057250906137677167344100509272321538514106803329777555095581443447923440527999830443775271873940188349851627688952505188828469053765110722558646635463610580931717088189633788653873452806695517110173718910738748439012971224590448209751864 
    d = 65537

   
    # n = p * q
    # print n

    
    # phi = (p - 1) * (q - 1)

    # # Compute modular inverse of e
    # gcd, a, b = egcd(e, phi)
    # d = a
    # d = d % phi
    # if (d < 0):
    #     d += phi

    # print( "d:  " + str(d) )

    pt = hex(int(pow(ct, d, n)))[2:-1].decode("hex")
    # pt = pow(ct, d, n)
    print( "flag: " + pt )

if __name__ == "__main__":
    main()